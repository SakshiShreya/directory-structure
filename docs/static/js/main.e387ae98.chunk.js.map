{"version":3,"sources":["component/addDirectoriesForm/AddDirectoriesForm.module.scss","redux/directories/directoriesTypes.ts","utils/findCurrentDirectory.ts","component/addDirectoriesForm/AddDirectoriesForm.tsx","redux/directories/directoriesActions.ts","component/directoriesScreen/DirectoriesScreen.tsx","redux/directories/directoriesReducer.ts","redux/store.ts","App.tsx","reportWebVitals.ts","index.tsx","component/directoriesScreen/DirectoriesScreen.module.scss"],"names":["module","exports","ADD_DIRECTORY","findCurrentDirectory","state","params","path","slice","process","length","split","shift","newState","JSON","parse","stringify","p","children","find","child","name","type","AddDirectoriesForm","props","dispatch","useDispatch","React","newDirectory","setNewDirectory","error","setError","useParams","directories","useSelector","Form","className","styles","input_cont","htmlFor","label","Field","Input","onChange","_","data","val","value","placeholder","id","fluid","Label","basic","color","pointing","Button","onClick","e","directoryName","address","preventDefault","payload","onClose","primary","disabled","DirectoriesScreen","showPopup","setShowPopup","currentPath","cont","Card","Content","Header","as","to","backPath","pop","join","back","back_button","Modal","size","open","trigger","onOpen","Divider","List","relaxed","map","Item","Icon","link","Segment","icon","Inline","initialState","addDirectory","directory","Error","newPath","directoriesReducer","action","unshift","store","createStore","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e387ae98.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input_cont\":\"AddDirectoriesForm_input_cont__3tGqq\",\"label\":\"AddDirectoriesForm_label__g_6We\"};","export const ADD_DIRECTORY = \"ADD_DIRECTORY\";\r\n","import { IDirectories } from \"../interfaces/directoryInterface\";\r\n\r\nexport function findCurrentDirectory(state: IDirectories, params: string) {\r\n  // if it is deployed, remove the PUBLIC_URL string from the beginning\r\n  params = params.slice(process.env.PUBLIC_URL.length);\r\n  let path = params.split(\"/\");\r\n  // remove blank string from beginning\r\n\r\n  if (path[0] === \"\") {\r\n    path.shift();\r\n  }\r\n\r\n  if (path.length === 0) {\r\n    return state;\r\n  } else {\r\n    let newState: IDirectories = JSON.parse(JSON.stringify(state));\r\n\r\n    for (let p of path) {\r\n      newState = newState.children.find(child => child.name === p) || {\r\n        type: \"error\",\r\n        name: \"This directory does not exist\",\r\n        children: []\r\n      };\r\n    }\r\n\r\n    return newState;\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { addDirectory } from \"../../redux/directories/directoriesActions\";\r\nimport { Input, Button, Form, Label } from \"semantic-ui-react\";\r\nimport styles from \"./AddDirectoriesForm.module.scss\";\r\nimport { IDirectories } from \"../../interfaces/directoryInterface\";\r\nimport { findCurrentDirectory } from \"../../utils/findCurrentDirectory\";\r\n\r\nexport interface AddDirectoriesFormProps {\r\n  onClose: () => void;\r\n}\r\n\r\nconst AddDirectoriesForm: React.FC<AddDirectoriesFormProps> = props => {\r\n  const dispatch = useDispatch();\r\n  const [newDirectory, setNewDirectory] = React.useState(\"\");\r\n  const [error, setError] = React.useState(\"\");\r\n  const params = useParams<{ 0: string }>();\r\n  const directories: IDirectories = useSelector<IDirectories, IDirectories>(state => findCurrentDirectory(state, params[0]));\r\n\r\n  function submitForm(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\r\n    e.preventDefault();\r\n\r\n    // validation\r\n    if (directories.children.find(child => child.name === newDirectory)) {\r\n      setError(\"This directory name already exists.\");\r\n    } else {\r\n      dispatch(addDirectory(newDirectory, params[\"0\"]));\r\n      props.onClose();\r\n    }\r\n  }\r\n\r\n  function handleNewDirectoryChange(val: string) {\r\n    error && setError(\"\");\r\n    setNewDirectory(val);\r\n  }\r\n\r\n  return (\r\n    <Form>\r\n      <div className={styles.input_cont}>\r\n        <label htmlFor=\"name\" className={styles.label}>\r\n          Directory Name\r\n        </label>\r\n        <Form.Field>\r\n          <Input onChange={(_, data) => handleNewDirectoryChange(data.value)} placeholder=\"Eg. Folder_1\" id=\"name\" fluid />\r\n          {error && (\r\n            <Label basic color=\"red\" pointing>\r\n              {error}\r\n            </Label>\r\n          )}\r\n        </Form.Field>\r\n      </div>\r\n      <Button type=\"submit\" onClick={submitForm} primary disabled={!newDirectory}>\r\n        Submit\r\n      </Button>\r\n      <Button type=\"button\" onClick={props.onClose}>\r\n        Cancel\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default AddDirectoriesForm;\r\n","import { IAction } from \"../../interfaces/directoryInterface\";\r\nimport { ADD_DIRECTORY } from \"./directoriesTypes\";\r\n\r\nexport const addDirectory = (directoryName: string, address: string): IAction => {\r\n  return {\r\n    type: ADD_DIRECTORY,\r\n    payload: {\r\n      name: directoryName,\r\n      type: \"directory\"\r\n    },\r\n    address\r\n  };\r\n};\r\n","import * as React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport AddDirectoriesForm from \"../addDirectoriesForm/AddDirectoriesForm\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { IDirectories } from \"../../interfaces/directoryInterface\";\r\nimport { Button, Modal, List, Card, Divider, Header, Segment, Icon } from \"semantic-ui-react\";\r\nimport { findCurrentDirectory } from \"../../utils/findCurrentDirectory\";\r\nimport styles from \"./DirectoriesScreen.module.scss\";\r\n\r\nexport interface DirectoriesScreenProps {}\r\n\r\nconst DirectoriesScreen: React.FC<DirectoriesScreenProps> = () => {\r\n  const params = useParams<{ 0: string }>();\r\n  const directories: IDirectories = useSelector<IDirectories, IDirectories>(state => findCurrentDirectory(state, params[0]));\r\n\r\n  const [showPopup, setShowPopup] = React.useState(false);\r\n\r\n  const currentPath = params[0].slice(process.env.PUBLIC_URL.length).split(\"/\");\r\n\r\n  function back() {\r\n    const backPath = [...currentPath];\r\n    backPath.pop();\r\n    return process.env.PUBLIC_URL + \"/\" + backPath.join(\"/\");\r\n  }\r\n\r\n  return (\r\n    <div className={styles.cont}>\r\n      <Card fluid>\r\n        {directories.type === \"directory\" && (\r\n          <Card.Content>\r\n            <Header as=\"h1\">{directories.name || \"ROOT\"}</Header>\r\n\r\n            {directories.name && (\r\n              <Link to={back()} className={styles.back_button}>\r\n                Back\r\n              </Link>\r\n            )}\r\n            <Modal\r\n              size=\"tiny\"\r\n              open={showPopup}\r\n              trigger={<Button primary>New Directory</Button>}\r\n              onOpen={() => setShowPopup(true)}\r\n              onClose={() => setShowPopup(false)}\r\n            >\r\n              <Modal.Header>New Directory</Modal.Header>\r\n              <Modal.Content>\r\n                <AddDirectoriesForm onClose={() => setShowPopup(false)} />\r\n              </Modal.Content>\r\n            </Modal>\r\n\r\n            <Divider />\r\n\r\n            <List relaxed>\r\n              {directories.children.map(child => (\r\n                <List.Item key={child.name}>\r\n                  <List.Icon name=\"folder\" />\r\n                  <List.Content>\r\n                    <Link to={(process.env.PUBLIC_URL + (directories.name === \"\" ? \"\" : \"/\")) + [...currentPath, child.name].join(\"/\")} className={styles.link}>\r\n                      {child.name}\r\n                    </Link>\r\n                  </List.Content>\r\n                </List.Item>\r\n              ))}\r\n            </List>\r\n          </Card.Content>\r\n        )}\r\n        {directories.type === \"error\" && (\r\n          <Segment placeholder>\r\n            <Header icon>\r\n              <Icon name=\"file pdf outline\" />\r\n              {directories.name}\r\n            </Header>\r\n            <Segment.Inline>\r\n              <Link to=\"/\" className={styles.back_button}>\r\n                Back\r\n              </Link>\r\n            </Segment.Inline>\r\n          </Segment>\r\n        )}\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DirectoriesScreen;\r\n","import { IAction, IDirectories } from \"../../interfaces/directoryInterface\";\r\nimport { ADD_DIRECTORY } from \"./directoriesTypes\";\r\n\r\nconst initialState: IDirectories = {\r\n  name: \"\",\r\n  type: \"directory\",\r\n  children: []\r\n};\r\n\r\nfunction addDirectory(directory: IDirectories, path: Array<string>, newDirectory: IDirectories) {\r\n  if (path.length === 1) {\r\n    // this is the path where change is needed\r\n    directory.children = [...directory.children, newDirectory];\r\n  } else if (path.length === 0) {\r\n    // this should never reach\r\n    throw Error(\"blank path sent\");\r\n  } else {\r\n    const child = directory.children.find(child => child.name === path[1])!;\r\n    const newPath = [...path];\r\n    newPath.shift();\r\n\r\n    addDirectory(child, newPath, newDirectory);\r\n  }\r\n}\r\n\r\nconst directoriesReducer = (state = initialState, action: IAction) => {\r\n  switch (action.type) {\r\n    case ADD_DIRECTORY:\r\n      const newDirectory: IDirectories = { ...action.payload, children: [] };\r\n\r\n      // if it is deployed, remove the PUBLIC_URL string from the beginning\r\n      let path = action.address.slice(process.env.PUBLIC_URL.length).split(\"/\");\r\n      if (path[0] !== \"\") {\r\n        path.unshift(\"\");\r\n      }\r\n\r\n      addDirectory(state, path, newDirectory);\r\n\r\n      return state;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default directoriesReducer;\r\n","import { createStore } from \"redux\";\r\nimport directoriesReducer from \"./directories/directoriesReducer\";\r\n\r\nconst store = createStore(directoriesReducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport DirectoriesScreen from \"./component/directoriesScreen/DirectoriesScreen\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/*\">\n            <DirectoriesScreen />\n          </Route>\n          <Route path=\"/\">\n            <DirectoriesScreen />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cont\":\"DirectoriesScreen_cont__iwBzh\",\"back_button\":\"DirectoriesScreen_back_button__1drhW\",\"link\":\"DirectoriesScreen_link__EhcJj\"};"],"sourceRoot":""}